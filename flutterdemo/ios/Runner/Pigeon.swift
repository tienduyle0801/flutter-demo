// Autogenerated from Pigeon (v9.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct SumRequest {
  var a: Int64? = nil
  var b: Int64? = nil

  static func fromList(_ list: [Any]) -> SumRequest? {
    let a = list[0] as! Int64? 
    let b = list[1] as! Int64? 

    return SumRequest(
      a: a,
      b: b
    )
  }
  func toList() -> [Any?] {
    return [
      a,
      b,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SumReply {
  var result: Int64? = nil

  static func fromList(_ list: [Any]) -> SumReply? {
    let result = list[0] as! Int64? 

    return SumReply(
      result: result
    )
  }
  func toList() -> [Any?] {
    return [
      result,
    ]
  }
}
private class SumApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return SumReply.fromList(self.readValue() as! [Any])
      case 129:
        return SumRequest.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class SumApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SumReply {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? SumRequest {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SumApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SumApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SumApiCodecWriter(data: data)
  }
}

class SumApiCodec: FlutterStandardMessageCodec {
  static let shared = SumApiCodec(readerWriter: SumApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SumApi {
  func sum(request: SumRequest) throws -> SumReply?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SumApiSetup {
  /// The codec used by SumApi.
  static var codec: FlutterStandardMessageCodec { SumApiCodec.shared }
  /// Sets up an instance of `SumApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SumApi?) {
    let sumChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SumApi.sum", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sumChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! SumRequest
        do {
          let result = try api.sum(request: requestArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sumChannel.setMessageHandler(nil)
    }
  }
}
