// Autogenerated from Pigeon (v9.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct MemoryResult {
  var usedMemory: Double? = nil

  static func fromList(_ list: [Any]) -> MemoryResult? {
    let usedMemory = list[0] as! Double? 

    return MemoryResult(
      usedMemory: usedMemory
    )
  }
  func toList() -> [Any?] {
    return [
      usedMemory,
    ]
  }
}
private class MemoryApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return MemoryResult.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class MemoryApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? MemoryResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MemoryApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MemoryApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MemoryApiCodecWriter(data: data)
  }
}

class MemoryApiCodec: FlutterStandardMessageCodec {
  static let shared = MemoryApiCodec(readerWriter: MemoryApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MemoryApi {
  func getMemoryInfo() throws -> MemoryResult
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MemoryApiSetup {
  /// The codec used by MemoryApi.
  static var codec: FlutterStandardMessageCodec { MemoryApiCodec.shared }
  /// Sets up an instance of `MemoryApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MemoryApi?) {
    let getMemoryInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MemoryApi.getMemoryInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMemoryInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getMemoryInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getMemoryInfoChannel.setMessageHandler(nil)
    }
  }
}
private class MemoryCallbackCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return MemoryResult.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class MemoryCallbackCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? MemoryResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MemoryCallbackCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MemoryCallbackCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MemoryCallbackCodecWriter(data: data)
  }
}

class MemoryCallbackCodec: FlutterStandardMessageCodec {
  static let shared = MemoryCallbackCodec(readerWriter: MemoryCallbackCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class MemoryCallback {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return MemoryCallbackCodec.shared
  }
  func onReceivedMemoryInfo(result resultArg: MemoryResult, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MemoryCallback.onReceivedMemoryInfo", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([resultArg] as [Any?]) { _ in
      completion()
    }
  }
}
